/* File:       $Id$
 * Revision:   $Revision$
 * Author:     $Author$
 * Date:       $Date$
 *
 * The Netarchive Suite - Software to harvest and preserve websites
 * Copyright 2004-2012 The Royal Danish Library, the Danish State and
 * University Library, the National Library of France and the Austrian
 * National Library.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package dk.netarkivet.harvester.harvesting;

import java.io.File;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import dk.netarkivet.common.exceptions.ArgumentNotValid;
import dk.netarkivet.common.exceptions.UnknownID;
import dk.netarkivet.harvester.datamodel.Job;

/** 
 * Implements the standard way of prefixing archive files in Netarchivesuite. 
 * I.e. jobid-harvestid
 */
public class LegacyNamingConvention implements ArchiveFileNaming {
    
    public LegacyNamingConvention() {
    }

    @Override
    public String getPrefix(Job theJob) {
        return theJob.getJobID() + "-" + theJob.getOrigHarvestDefinitionID();
    }
    
    
    /**
     * A class for parsing an ARC filename as generated by our runs of Heritrix
     * and retrieving components like harvestID and jobID.
     * See HeritrixLauncher.getCrawlID for where the format gets defined.
     */
    public static class LegacyFilenameParser extends ArchiveFilenameParser{
        
        private Log log = LogFactory.getLog(LegacyFilenameParser.class);

        /**
         * Our file names contain jobID, harvestID, timestamp and serial no.
         */
        private static final Pattern FILE_NAME_PATTERN =
            Pattern.compile("(\\d+)\\-(\\d+)\\-(\\d+)\\-(\\d+)\\-.*");

        /** Pattern group containing the Job ID. */
        private static final int JOB_ID = 1;
        /** Pattern group containing the harvest ID. */
        private static final int HARVEST_ID = 2;
        /** Pattern group containing the timestamp. */
        private static final int TIME_STAMP = 3;
        /** Pattern group containing the serial number. */
        private static final int SERIAL_NO = 4;

        /** Field containing the parsed harvest ID. */
        private final String harvestID;
        /** Field containing the parsed job Id. */
        private final String jobID;
        /** Field containing the timestamp. */
        private final String timeStamp;
        /** Field containing the serial number. */
        private final String serialNo;

        /** Field containing the original filename. */
        private final String filename;
        /**
         * Parses the name of the given file.
         * @param file An ARC/CDX file named following the NetarchiveSuite
         * convention.
         * @throws UnknownID if the file was NOT named following
         * NetarchiveSuite convention; or any other exception occurred
         */
        public LegacyFilenameParser(File file) throws UnknownID {
            ArgumentNotValid.checkNotNull(file, "File file");
            try {
                filename = file.getName();
                Matcher m = FILE_NAME_PATTERN.matcher(file.getName());
                if (m.matches()){
                    harvestID = m.group(HARVEST_ID);
                    jobID = m.group(JOB_ID);
                    timeStamp = m.group(TIME_STAMP);
                    serialNo = m.group(SERIAL_NO);
                } else {
                    String errMsg = "The name: '"
                        + filename
                        + "' did not match the NetarchiveSuite convention";
                    log.warn(errMsg);
                    throw new UnknownID(errMsg);
                }
            } catch (RuntimeException e) {
                String errMsg = "Could not parse the name '"
                    + file.getName() + "'.";
                log.warn(errMsg);
                throw new UnknownID(errMsg, e);
            }
        }
        
        /** 
         * Get the harvestID.
         * @return the harvestID.
         */
        public String getHarvestID() {
            return harvestID;
        }
        
        /** 
         * Get the job ID.
         * @return the Job ID.
         */
        public String getJobID() {
            return jobID;
        }
        
        /** 
         * Get the timestamp.
         * @return the timestamp.
         */
        public String getTimeStamp() {
            return timeStamp;
        }
        
        /** 
         * Get the serial number.
         * @return the serial number.
         */
        public String getSerialNo() {
            return serialNo;
        }
        
        /** 
         * Get the filename.
         * @return the filename.
         */
        public String getFilename() {
            return filename;
        }
    }


    @Override
    public ArchiveFilenameParser getArchiveFilenameParser(File f) {
        return new LegacyFilenameParser(f);
    }
}
